# coding: utf-8

"""
    Safaricom APIs

    M-Pesa API client for Daraja  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class B2CPaymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initiator_name': 'str',
        'security_credential': 'str',
        'command_id': 'str',
        'amount': 'int',
        'party_a': 'int',
        'party_b': 'str',
        'remarks': 'str',
        'queue_time_out_url': 'str',
        'result_url': 'str',
        'occasion': 'str'
    }

    attribute_map = {
        'initiator_name': 'InitiatorName',
        'security_credential': 'SecurityCredential',
        'command_id': 'CommandID',
        'amount': 'Amount',
        'party_a': 'PartyA',
        'party_b': 'PartyB',
        'remarks': 'Remarks',
        'queue_time_out_url': 'QueueTimeOutURL',
        'result_url': 'ResultURL',
        'occasion': 'Occasion'
    }

    def __init__(self, initiator_name=None, security_credential=None, command_id=None, amount=None, party_a=None, party_b=None, remarks=None, queue_time_out_url=None, result_url=None, occasion=None):  # noqa: E501
        """B2CPaymentRequest - a model defined in Swagger"""  # noqa: E501
        self._initiator_name = None
        self._security_credential = None
        self._command_id = None
        self._amount = None
        self._party_a = None
        self._party_b = None
        self._remarks = None
        self._queue_time_out_url = None
        self._result_url = None
        self._occasion = None
        self.discriminator = None
        if initiator_name is not None:
            self.initiator_name = initiator_name
        if security_credential is not None:
            self.security_credential = security_credential
        if command_id is not None:
            self.command_id = command_id
        if amount is not None:
            self.amount = amount
        if party_a is not None:
            self.party_a = party_a
        if party_b is not None:
            self.party_b = party_b
        if remarks is not None:
            self.remarks = remarks
        if queue_time_out_url is not None:
            self.queue_time_out_url = queue_time_out_url
        if result_url is not None:
            self.result_url = result_url
        if occasion is not None:
            self.occasion = occasion

    @property
    def initiator_name(self):
        """Gets the initiator_name of this B2CPaymentRequest.  # noqa: E501

        This is an API user created by the Business Administrator of the M-PESA Bulk disbursement account that is active and authorized to initiate B2C transactions via API.  # noqa: E501

        :return: The initiator_name of this B2CPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._initiator_name

    @initiator_name.setter
    def initiator_name(self, initiator_name):
        """Sets the initiator_name of this B2CPaymentRequest.

        This is an API user created by the Business Administrator of the M-PESA Bulk disbursement account that is active and authorized to initiate B2C transactions via API.  # noqa: E501

        :param initiator_name: The initiator_name of this B2CPaymentRequest.  # noqa: E501
        :type: str
        """

        self._initiator_name = initiator_name

    @property
    def security_credential(self):
        """Gets the security_credential of this B2CPaymentRequest.  # noqa: E501

        This is the value obtained after encrypting the API initiator password. The password on Sandbox has been provisioned on the simulator. However, on production the password is created when the user is being created on the M-PESA organization portal.  # noqa: E501

        :return: The security_credential of this B2CPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._security_credential

    @security_credential.setter
    def security_credential(self, security_credential):
        """Sets the security_credential of this B2CPaymentRequest.

        This is the value obtained after encrypting the API initiator password. The password on Sandbox has been provisioned on the simulator. However, on production the password is created when the user is being created on the M-PESA organization portal.  # noqa: E501

        :param security_credential: The security_credential of this B2CPaymentRequest.  # noqa: E501
        :type: str
        """

        self._security_credential = security_credential

    @property
    def command_id(self):
        """Gets the command_id of this B2CPaymentRequest.  # noqa: E501

        This is a unique command that specifies B2C transaction type. SalaryPayment: This supports sending money to both registered and unregistered M-Pesa customers. BusinessPayment: This is a normal business to customer payment, supports only M-PESA registered customers. PromotionPayment: This is a promotional payment to customers. The M-PESA notification message is a congratulatory message. Supports only M-PESA registered customers.   # noqa: E501

        :return: The command_id of this B2CPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this B2CPaymentRequest.

        This is a unique command that specifies B2C transaction type. SalaryPayment: This supports sending money to both registered and unregistered M-Pesa customers. BusinessPayment: This is a normal business to customer payment, supports only M-PESA registered customers. PromotionPayment: This is a promotional payment to customers. The M-PESA notification message is a congratulatory message. Supports only M-PESA registered customers.   # noqa: E501

        :param command_id: The command_id of this B2CPaymentRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["SalaryPayment", "PromotionPayment", "BusinessPayment"]  # noqa: E501
        if command_id not in allowed_values:
            raise ValueError(
                "Invalid value for `command_id` ({0}), must be one of {1}"  # noqa: E501
                .format(command_id, allowed_values)
            )

        self._command_id = command_id

    @property
    def amount(self):
        """Gets the amount of this B2CPaymentRequest.  # noqa: E501

        The amount of money being sent to the customer.  # noqa: E501

        :return: The amount of this B2CPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this B2CPaymentRequest.

        The amount of money being sent to the customer.  # noqa: E501

        :param amount: The amount of this B2CPaymentRequest.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def party_a(self):
        """Gets the party_a of this B2CPaymentRequest.  # noqa: E501

        This is the B2C organization shortcode from which the money is sent from.  # noqa: E501

        :return: The party_a of this B2CPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._party_a

    @party_a.setter
    def party_a(self, party_a):
        """Sets the party_a of this B2CPaymentRequest.

        This is the B2C organization shortcode from which the money is sent from.  # noqa: E501

        :param party_a: The party_a of this B2CPaymentRequest.  # noqa: E501
        :type: int
        """

        self._party_a = party_a

    @property
    def party_b(self):
        """Gets the party_b of this B2CPaymentRequest.  # noqa: E501

        This is the customer mobile number to receive the amount. - The number should have the country code (254) without the plus sign.  # noqa: E501

        :return: The party_b of this B2CPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._party_b

    @party_b.setter
    def party_b(self, party_b):
        """Sets the party_b of this B2CPaymentRequest.

        This is the customer mobile number to receive the amount. - The number should have the country code (254) without the plus sign.  # noqa: E501

        :param party_b: The party_b of this B2CPaymentRequest.  # noqa: E501
        :type: str
        """

        self._party_b = party_b

    @property
    def remarks(self):
        """Gets the remarks of this B2CPaymentRequest.  # noqa: E501

        Any additional information to be associated with the transaction.  # noqa: E501

        :return: The remarks of this B2CPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this B2CPaymentRequest.

        Any additional information to be associated with the transaction.  # noqa: E501

        :param remarks: The remarks of this B2CPaymentRequest.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def queue_time_out_url(self):
        """Gets the queue_time_out_url of this B2CPaymentRequest.  # noqa: E501

        This is the URL to be specified in your request that will be used by API Proxy to send notification incase the payment request is timed out while awaiting processing in the queue.  # noqa: E501

        :return: The queue_time_out_url of this B2CPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._queue_time_out_url

    @queue_time_out_url.setter
    def queue_time_out_url(self, queue_time_out_url):
        """Sets the queue_time_out_url of this B2CPaymentRequest.

        This is the URL to be specified in your request that will be used by API Proxy to send notification incase the payment request is timed out while awaiting processing in the queue.  # noqa: E501

        :param queue_time_out_url: The queue_time_out_url of this B2CPaymentRequest.  # noqa: E501
        :type: str
        """

        self._queue_time_out_url = queue_time_out_url

    @property
    def result_url(self):
        """Gets the result_url of this B2CPaymentRequest.  # noqa: E501

        This is the URL to be specified in your request that will be used by M-PESA to send notification upon processing of the payment request.  # noqa: E501

        :return: The result_url of this B2CPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._result_url

    @result_url.setter
    def result_url(self, result_url):
        """Sets the result_url of this B2CPaymentRequest.

        This is the URL to be specified in your request that will be used by M-PESA to send notification upon processing of the payment request.  # noqa: E501

        :param result_url: The result_url of this B2CPaymentRequest.  # noqa: E501
        :type: str
        """

        self._result_url = result_url

    @property
    def occasion(self):
        """Gets the occasion of this B2CPaymentRequest.  # noqa: E501

        Any additional information to be associated with the transaction.  # noqa: E501

        :return: The occasion of this B2CPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._occasion

    @occasion.setter
    def occasion(self, occasion):
        """Sets the occasion of this B2CPaymentRequest.

        Any additional information to be associated with the transaction.  # noqa: E501

        :param occasion: The occasion of this B2CPaymentRequest.  # noqa: E501
        :type: str
        """

        self._occasion = occasion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(B2CPaymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, B2CPaymentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
