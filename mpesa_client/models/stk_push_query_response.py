# coding: utf-8

"""
    Safaricom APIs

    M-Pesa API client for Daraja  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StkPushQueryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'response_code': 'int',
        'response_description': 'str',
        'merchant_request_id': 'str',
        'checkout_request_id': 'str',
        'result_code': 'int',
        'result_desc': 'str'
    }

    attribute_map = {
        'response_code': 'ResponseCode',
        'response_description': 'ResponseDescription',
        'merchant_request_id': 'MerchantRequestID',
        'checkout_request_id': 'CheckoutRequestID',
        'result_code': 'ResultCode',
        'result_desc': 'ResultDesc'
    }

    def __init__(self, response_code=None, response_description=None, merchant_request_id=None, checkout_request_id=None, result_code=None, result_desc=None):  # noqa: E501
        """StkPushQueryResponse - a model defined in Swagger"""  # noqa: E501
        self._response_code = None
        self._response_description = None
        self._merchant_request_id = None
        self._checkout_request_id = None
        self._result_code = None
        self._result_desc = None
        self.discriminator = None
        if response_code is not None:
            self.response_code = response_code
        if response_description is not None:
            self.response_description = response_description
        if merchant_request_id is not None:
            self.merchant_request_id = merchant_request_id
        if checkout_request_id is not None:
            self.checkout_request_id = checkout_request_id
        if result_code is not None:
            self.result_code = result_code
        if result_desc is not None:
            self.result_desc = result_desc

    @property
    def response_code(self):
        """Gets the response_code of this StkPushQueryResponse.  # noqa: E501

        This is a numeric status code that indicates the status of the request. 0 means the request was successful.  # noqa: E501

        :return: The response_code of this StkPushQueryResponse.  # noqa: E501
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this StkPushQueryResponse.

        This is a numeric status code that indicates the status of the request. 0 means the request was successful.  # noqa: E501

        :param response_code: The response_code of this StkPushQueryResponse.  # noqa: E501
        :type: int
        """

        self._response_code = response_code

    @property
    def response_description(self):
        """Gets the response_description of this StkPushQueryResponse.  # noqa: E501

        Response description is an acknowledgment message from the API that gives the status of the request submission usually maps to a specific ResponseCode value. It can be a \"Success\" submission message or an error description.  # noqa: E501

        :return: The response_description of this StkPushQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._response_description

    @response_description.setter
    def response_description(self, response_description):
        """Sets the response_description of this StkPushQueryResponse.

        Response description is an acknowledgment message from the API that gives the status of the request submission usually maps to a specific ResponseCode value. It can be a \"Success\" submission message or an error description.  # noqa: E501

        :param response_description: The response_description of this StkPushQueryResponse.  # noqa: E501
        :type: str
        """

        self._response_description = response_description

    @property
    def merchant_request_id(self):
        """Gets the merchant_request_id of this StkPushQueryResponse.  # noqa: E501

        This is a global unique Identifier for any submitted payment request.  # noqa: E501

        :return: The merchant_request_id of this StkPushQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._merchant_request_id

    @merchant_request_id.setter
    def merchant_request_id(self, merchant_request_id):
        """Sets the merchant_request_id of this StkPushQueryResponse.

        This is a global unique Identifier for any submitted payment request.  # noqa: E501

        :param merchant_request_id: The merchant_request_id of this StkPushQueryResponse.  # noqa: E501
        :type: str
        """

        self._merchant_request_id = merchant_request_id

    @property
    def checkout_request_id(self):
        """Gets the checkout_request_id of this StkPushQueryResponse.  # noqa: E501

        This is a global unique identifier of the processed checkout transaction request.  # noqa: E501

        :return: The checkout_request_id of this StkPushQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._checkout_request_id

    @checkout_request_id.setter
    def checkout_request_id(self, checkout_request_id):
        """Sets the checkout_request_id of this StkPushQueryResponse.

        This is a global unique identifier of the processed checkout transaction request.  # noqa: E501

        :param checkout_request_id: The checkout_request_id of this StkPushQueryResponse.  # noqa: E501
        :type: str
        """

        self._checkout_request_id = checkout_request_id

    @property
    def result_code(self):
        """Gets the result_code of this StkPushQueryResponse.  # noqa: E501

        This is a numeric status code that indicates the status of the request. 0 means the request was successful.  # noqa: E501

        :return: The result_code of this StkPushQueryResponse.  # noqa: E501
        :rtype: int
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this StkPushQueryResponse.

        This is a numeric status code that indicates the status of the request. 0 means the request was successful.  # noqa: E501

        :param result_code: The result_code of this StkPushQueryResponse.  # noqa: E501
        :type: int
        """

        self._result_code = result_code

    @property
    def result_desc(self):
        """Gets the result_desc of this StkPushQueryResponse.  # noqa: E501


        :return: The result_desc of this StkPushQueryResponse.  # noqa: E501
        :rtype: str
        """
        return self._result_desc

    @result_desc.setter
    def result_desc(self, result_desc):
        """Sets the result_desc of this StkPushQueryResponse.


        :param result_desc: The result_desc of this StkPushQueryResponse.  # noqa: E501
        :type: str
        """

        self._result_desc = result_desc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StkPushQueryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StkPushQueryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
