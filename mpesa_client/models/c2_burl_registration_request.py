# coding: utf-8

"""
    Safaricom APIs

    M-Pesa API client for Daraja  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class C2BURLRegistrationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_code': 'int',
        'response_type': 'str',
        'confirmation_url': 'str',
        'validation_url': 'str'
    }

    attribute_map = {
        'short_code': 'ShortCode',
        'response_type': 'ResponseType',
        'confirmation_url': 'ConfirmationURL',
        'validation_url': 'ValidationURL'
    }

    def __init__(self, short_code=None, response_type=None, confirmation_url=None, validation_url=None):  # noqa: E501
        """C2BURLRegistrationRequest - a model defined in Swagger"""  # noqa: E501
        self._short_code = None
        self._response_type = None
        self._confirmation_url = None
        self._validation_url = None
        self.discriminator = None
        if short_code is not None:
            self.short_code = short_code
        if response_type is not None:
            self.response_type = response_type
        if confirmation_url is not None:
            self.confirmation_url = confirmation_url
        if validation_url is not None:
            self.validation_url = validation_url

    @property
    def short_code(self):
        """Gets the short_code of this C2BURLRegistrationRequest.  # noqa: E501

        Usually, a unique number is tagged to an M-PESA pay bill/till number of the organization.  # noqa: E501

        :return: The short_code of this C2BURLRegistrationRequest.  # noqa: E501
        :rtype: int
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this C2BURLRegistrationRequest.

        Usually, a unique number is tagged to an M-PESA pay bill/till number of the organization.  # noqa: E501

        :param short_code: The short_code of this C2BURLRegistrationRequest.  # noqa: E501
        :type: int
        """

        self._short_code = short_code

    @property
    def response_type(self):
        """Gets the response_type of this C2BURLRegistrationRequest.  # noqa: E501

        This parameter specifies what is to happen if for any reason the validation URL is not reachable. Note that, this is the default action value that determines what M-PESA will do in the scenario that your endpoint is unreachable or is unable to respond on time. Only two values are allowed: Completed or Cancelled. Completed means M-PESA will automatically complete your transaction, whereas Cancelled means M-PESA will automatically cancel the transaction, in the event M-PESA is unable to reach your Validation URL.   # noqa: E501

        :return: The response_type of this C2BURLRegistrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this C2BURLRegistrationRequest.

        This parameter specifies what is to happen if for any reason the validation URL is not reachable. Note that, this is the default action value that determines what M-PESA will do in the scenario that your endpoint is unreachable or is unable to respond on time. Only two values are allowed: Completed or Cancelled. Completed means M-PESA will automatically complete your transaction, whereas Cancelled means M-PESA will automatically cancel the transaction, in the event M-PESA is unable to reach your Validation URL.   # noqa: E501

        :param response_type: The response_type of this C2BURLRegistrationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Completed", "Cancelled"]  # noqa: E501
        if response_type not in allowed_values:
            raise ValueError(
                "Invalid value for `response_type` ({0}), must be one of {1}"  # noqa: E501
                .format(response_type, allowed_values)
            )

        self._response_type = response_type

    @property
    def confirmation_url(self):
        """Gets the confirmation_url of this C2BURLRegistrationRequest.  # noqa: E501

        This is the URL that receives the confirmation request from API upon payment completion.  # noqa: E501

        :return: The confirmation_url of this C2BURLRegistrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_url

    @confirmation_url.setter
    def confirmation_url(self, confirmation_url):
        """Sets the confirmation_url of this C2BURLRegistrationRequest.

        This is the URL that receives the confirmation request from API upon payment completion.  # noqa: E501

        :param confirmation_url: The confirmation_url of this C2BURLRegistrationRequest.  # noqa: E501
        :type: str
        """

        self._confirmation_url = confirmation_url

    @property
    def validation_url(self):
        """Gets the validation_url of this C2BURLRegistrationRequest.  # noqa: E501

        This is the URL that receives the validation request from the API upon payment submission. The validation URL is only called if the external validation on the registered shortcode is enabled. (By default External Validation is disabled).  # noqa: E501

        :return: The validation_url of this C2BURLRegistrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._validation_url

    @validation_url.setter
    def validation_url(self, validation_url):
        """Sets the validation_url of this C2BURLRegistrationRequest.

        This is the URL that receives the validation request from the API upon payment submission. The validation URL is only called if the external validation on the registered shortcode is enabled. (By default External Validation is disabled).  # noqa: E501

        :param validation_url: The validation_url of this C2BURLRegistrationRequest.  # noqa: E501
        :type: str
        """

        self._validation_url = validation_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(C2BURLRegistrationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, C2BURLRegistrationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
