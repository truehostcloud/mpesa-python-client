# coding: utf-8

"""
    Safaricom APIs

    M-Pesa API client for Daraja  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class B2BPaymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initiator': 'str',
        'security_credential': 'str',
        'command_id': 'str',
        'sender_identifier_type': 'int',
        'receiver_identifier_type': 'int',
        'amount': 'int',
        'party_a': 'int',
        'party_b': 'int',
        'account_reference': 'str',
        'remarks': 'str',
        'queue_time_out_url': 'str',
        'result_url': 'str'
    }

    attribute_map = {
        'initiator': 'Initiator',
        'security_credential': 'SecurityCredential',
        'command_id': 'CommandID',
        'sender_identifier_type': 'SenderIdentifierType',
        'receiver_identifier_type': 'ReceiverIdentifierType',
        'amount': 'Amount',
        'party_a': 'PartyA',
        'party_b': 'PartyB',
        'account_reference': 'AccountReference',
        'remarks': 'Remarks',
        'queue_time_out_url': 'QueueTimeOutURL',
        'result_url': 'ResultURL'
    }

    def __init__(self, initiator=None, security_credential=None, command_id=None, sender_identifier_type=None, receiver_identifier_type=None, amount=None, party_a=None, party_b=None, account_reference=None, remarks=None, queue_time_out_url=None, result_url=None):  # noqa: E501
        """B2BPaymentRequest - a model defined in Swagger"""  # noqa: E501
        self._initiator = None
        self._security_credential = None
        self._command_id = None
        self._sender_identifier_type = None
        self._receiver_identifier_type = None
        self._amount = None
        self._party_a = None
        self._party_b = None
        self._account_reference = None
        self._remarks = None
        self._queue_time_out_url = None
        self._result_url = None
        self.discriminator = None
        self.initiator = initiator
        self.security_credential = security_credential
        self.command_id = command_id
        self.sender_identifier_type = sender_identifier_type
        self.receiver_identifier_type = receiver_identifier_type
        self.amount = amount
        self.party_a = party_a
        self.party_b = party_b
        self.account_reference = account_reference
        self.remarks = remarks
        self.queue_time_out_url = queue_time_out_url
        self.result_url = result_url

    @property
    def initiator(self):
        """Gets the initiator of this B2BPaymentRequest.  # noqa: E501

        The M-Pesa API operator username. This user needs Org Business Pay Bill API initiator role on M-Pesa  # noqa: E501

        :return: The initiator of this B2BPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._initiator

    @initiator.setter
    def initiator(self, initiator):
        """Sets the initiator of this B2BPaymentRequest.

        The M-Pesa API operator username. This user needs Org Business Pay Bill API initiator role on M-Pesa  # noqa: E501

        :param initiator: The initiator of this B2BPaymentRequest.  # noqa: E501
        :type: str
        """
        if initiator is None:
            raise ValueError("Invalid value for `initiator`, must not be `None`")  # noqa: E501

        self._initiator = initiator

    @property
    def security_credential(self):
        """Gets the security_credential of this B2BPaymentRequest.  # noqa: E501

        Encrypted credential of the user getting transaction status  # noqa: E501

        :return: The security_credential of this B2BPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._security_credential

    @security_credential.setter
    def security_credential(self, security_credential):
        """Sets the security_credential of this B2BPaymentRequest.

        Encrypted credential of the user getting transaction status  # noqa: E501

        :param security_credential: The security_credential of this B2BPaymentRequest.  # noqa: E501
        :type: str
        """
        if security_credential is None:
            raise ValueError("Invalid value for `security_credential`, must not be `None`")  # noqa: E501

        self._security_credential = security_credential

    @property
    def command_id(self):
        """Gets the command_id of this B2BPaymentRequest.  # noqa: E501

        This is a unique command that specifies B2B transaction type. BusinessPayBill: This supports sending money to both registered and unregistered M-Pesa customers. BusinessPayToBulk: This is a normal business to customer payment, supports only M-PESA registered customers.   # noqa: E501

        :return: The command_id of this B2BPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this B2BPaymentRequest.

        This is a unique command that specifies B2B transaction type. BusinessPayBill: This supports sending money to both registered and unregistered M-Pesa customers. BusinessPayToBulk: This is a normal business to customer payment, supports only M-PESA registered customers.   # noqa: E501

        :param command_id: The command_id of this B2BPaymentRequest.  # noqa: E501
        :type: str
        """
        if command_id is None:
            raise ValueError("Invalid value for `command_id`, must not be `None`")  # noqa: E501
        allowed_values = ["BusinessPayBill", "BusinessPayToBulk"]  # noqa: E501
        if command_id not in allowed_values:
            raise ValueError(
                "Invalid value for `command_id` ({0}), must be one of {1}"  # noqa: E501
                .format(command_id, allowed_values)
            )

        self._command_id = command_id

    @property
    def sender_identifier_type(self):
        """Gets the sender_identifier_type of this B2BPaymentRequest.  # noqa: E501

        The type of shortcode from which money is deducted. For this API, only \"4\" is allowed.  # noqa: E501

        :return: The sender_identifier_type of this B2BPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._sender_identifier_type

    @sender_identifier_type.setter
    def sender_identifier_type(self, sender_identifier_type):
        """Sets the sender_identifier_type of this B2BPaymentRequest.

        The type of shortcode from which money is deducted. For this API, only \"4\" is allowed.  # noqa: E501

        :param sender_identifier_type: The sender_identifier_type of this B2BPaymentRequest.  # noqa: E501
        :type: int
        """
        if sender_identifier_type is None:
            raise ValueError("Invalid value for `sender_identifier_type`, must not be `None`")  # noqa: E501
        allowed_values = [4]  # noqa: E501
        if sender_identifier_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sender_identifier_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sender_identifier_type, allowed_values)
            )

        self._sender_identifier_type = sender_identifier_type

    @property
    def receiver_identifier_type(self):
        """Gets the receiver_identifier_type of this B2BPaymentRequest.  # noqa: E501

        The type of shortcode to which money is sent. For this API, only \"4\" is allowed.  # noqa: E501

        :return: The receiver_identifier_type of this B2BPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._receiver_identifier_type

    @receiver_identifier_type.setter
    def receiver_identifier_type(self, receiver_identifier_type):
        """Sets the receiver_identifier_type of this B2BPaymentRequest.

        The type of shortcode to which money is sent. For this API, only \"4\" is allowed.  # noqa: E501

        :param receiver_identifier_type: The receiver_identifier_type of this B2BPaymentRequest.  # noqa: E501
        :type: int
        """
        if receiver_identifier_type is None:
            raise ValueError("Invalid value for `receiver_identifier_type`, must not be `None`")  # noqa: E501
        allowed_values = [4]  # noqa: E501
        if receiver_identifier_type not in allowed_values:
            raise ValueError(
                "Invalid value for `receiver_identifier_type` ({0}), must be one of {1}"  # noqa: E501
                .format(receiver_identifier_type, allowed_values)
            )

        self._receiver_identifier_type = receiver_identifier_type

    @property
    def amount(self):
        """Gets the amount of this B2BPaymentRequest.  # noqa: E501

        The transaction amount.  # noqa: E501

        :return: The amount of this B2BPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this B2BPaymentRequest.

        The transaction amount.  # noqa: E501

        :param amount: The amount of this B2BPaymentRequest.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def party_a(self):
        """Gets the party_a of this B2BPaymentRequest.  # noqa: E501

        Your shortcode. The shortcode from which money will be deducted.  # noqa: E501

        :return: The party_a of this B2BPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._party_a

    @party_a.setter
    def party_a(self, party_a):
        """Sets the party_a of this B2BPaymentRequest.

        Your shortcode. The shortcode from which money will be deducted.  # noqa: E501

        :param party_a: The party_a of this B2BPaymentRequest.  # noqa: E501
        :type: int
        """
        if party_a is None:
            raise ValueError("Invalid value for `party_a`, must not be `None`")  # noqa: E501

        self._party_a = party_a

    @property
    def party_b(self):
        """Gets the party_b of this B2BPaymentRequest.  # noqa: E501

        The shortcode to which money will be moved  # noqa: E501

        :return: The party_b of this B2BPaymentRequest.  # noqa: E501
        :rtype: int
        """
        return self._party_b

    @party_b.setter
    def party_b(self, party_b):
        """Sets the party_b of this B2BPaymentRequest.

        The shortcode to which money will be moved  # noqa: E501

        :param party_b: The party_b of this B2BPaymentRequest.  # noqa: E501
        :type: int
        """
        if party_b is None:
            raise ValueError("Invalid value for `party_b`, must not be `None`")  # noqa: E501

        self._party_b = party_b

    @property
    def account_reference(self):
        """Gets the account_reference of this B2BPaymentRequest.  # noqa: E501

        The account number to be associated with the payment. Up to 13 characters.  # noqa: E501

        :return: The account_reference of this B2BPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_reference

    @account_reference.setter
    def account_reference(self, account_reference):
        """Sets the account_reference of this B2BPaymentRequest.

        The account number to be associated with the payment. Up to 13 characters.  # noqa: E501

        :param account_reference: The account_reference of this B2BPaymentRequest.  # noqa: E501
        :type: str
        """
        if account_reference is None:
            raise ValueError("Invalid value for `account_reference`, must not be `None`")  # noqa: E501

        self._account_reference = account_reference

    @property
    def remarks(self):
        """Gets the remarks of this B2BPaymentRequest.  # noqa: E501

        Comments that are sent along with the transaction  # noqa: E501

        :return: The remarks of this B2BPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this B2BPaymentRequest.

        Comments that are sent along with the transaction  # noqa: E501

        :param remarks: The remarks of this B2BPaymentRequest.  # noqa: E501
        :type: str
        """
        if remarks is None:
            raise ValueError("Invalid value for `remarks`, must not be `None`")  # noqa: E501

        self._remarks = remarks

    @property
    def queue_time_out_url(self):
        """Gets the queue_time_out_url of this B2BPaymentRequest.  # noqa: E501

        A URL that will be used to notify your system in case the request times out before processing.  # noqa: E501

        :return: The queue_time_out_url of this B2BPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._queue_time_out_url

    @queue_time_out_url.setter
    def queue_time_out_url(self, queue_time_out_url):
        """Sets the queue_time_out_url of this B2BPaymentRequest.

        A URL that will be used to notify your system in case the request times out before processing.  # noqa: E501

        :param queue_time_out_url: The queue_time_out_url of this B2BPaymentRequest.  # noqa: E501
        :type: str
        """
        if queue_time_out_url is None:
            raise ValueError("Invalid value for `queue_time_out_url`, must not be `None`")  # noqa: E501

        self._queue_time_out_url = queue_time_out_url

    @property
    def result_url(self):
        """Gets the result_url of this B2BPaymentRequest.  # noqa: E501

        A URL that will be used to send transaction results after processing.  # noqa: E501

        :return: The result_url of this B2BPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._result_url

    @result_url.setter
    def result_url(self, result_url):
        """Sets the result_url of this B2BPaymentRequest.

        A URL that will be used to send transaction results after processing.  # noqa: E501

        :param result_url: The result_url of this B2BPaymentRequest.  # noqa: E501
        :type: str
        """
        if result_url is None:
            raise ValueError("Invalid value for `result_url`, must not be `None`")  # noqa: E501

        self._result_url = result_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(B2BPaymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, B2BPaymentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
