# coding: utf-8

"""
    Safaricom APIs

    M-Pesa API client for Daraja  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class C2BPaymentSimulationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_code': 'str',
        'command_id': 'str',
        'amount': 'int',
        'msisdn': 'str',
        'bill_ref_number': 'str'
    }

    attribute_map = {
        'short_code': 'ShortCode',
        'command_id': 'CommandID',
        'amount': 'Amount',
        'msisdn': 'Msisdn',
        'bill_ref_number': 'BillRefNumber'
    }

    def __init__(self, short_code=None, command_id=None, amount=None, msisdn=None, bill_ref_number=None):  # noqa: E501
        """C2BPaymentSimulationRequest - a model defined in Swagger"""  # noqa: E501
        self._short_code = None
        self._command_id = None
        self._amount = None
        self._msisdn = None
        self._bill_ref_number = None
        self.discriminator = None
        self.short_code = short_code
        self.command_id = command_id
        self.amount = amount
        self.msisdn = msisdn
        self.bill_ref_number = bill_ref_number

    @property
    def short_code(self):
        """Gets the short_code of this C2BPaymentSimulationRequest.  # noqa: E501


        :return: The short_code of this C2BPaymentSimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this C2BPaymentSimulationRequest.


        :param short_code: The short_code of this C2BPaymentSimulationRequest.  # noqa: E501
        :type: str
        """
        if short_code is None:
            raise ValueError("Invalid value for `short_code`, must not be `None`")  # noqa: E501

        self._short_code = short_code

    @property
    def command_id(self):
        """Gets the command_id of this C2BPaymentSimulationRequest.  # noqa: E501


        :return: The command_id of this C2BPaymentSimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._command_id

    @command_id.setter
    def command_id(self, command_id):
        """Sets the command_id of this C2BPaymentSimulationRequest.


        :param command_id: The command_id of this C2BPaymentSimulationRequest.  # noqa: E501
        :type: str
        """
        if command_id is None:
            raise ValueError("Invalid value for `command_id`, must not be `None`")  # noqa: E501

        self._command_id = command_id

    @property
    def amount(self):
        """Gets the amount of this C2BPaymentSimulationRequest.  # noqa: E501


        :return: The amount of this C2BPaymentSimulationRequest.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this C2BPaymentSimulationRequest.


        :param amount: The amount of this C2BPaymentSimulationRequest.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def msisdn(self):
        """Gets the msisdn of this C2BPaymentSimulationRequest.  # noqa: E501


        :return: The msisdn of this C2BPaymentSimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """Sets the msisdn of this C2BPaymentSimulationRequest.


        :param msisdn: The msisdn of this C2BPaymentSimulationRequest.  # noqa: E501
        :type: str
        """
        if msisdn is None:
            raise ValueError("Invalid value for `msisdn`, must not be `None`")  # noqa: E501

        self._msisdn = msisdn

    @property
    def bill_ref_number(self):
        """Gets the bill_ref_number of this C2BPaymentSimulationRequest.  # noqa: E501


        :return: The bill_ref_number of this C2BPaymentSimulationRequest.  # noqa: E501
        :rtype: str
        """
        return self._bill_ref_number

    @bill_ref_number.setter
    def bill_ref_number(self, bill_ref_number):
        """Sets the bill_ref_number of this C2BPaymentSimulationRequest.


        :param bill_ref_number: The bill_ref_number of this C2BPaymentSimulationRequest.  # noqa: E501
        :type: str
        """
        if bill_ref_number is None:
            raise ValueError("Invalid value for `bill_ref_number`, must not be `None`")  # noqa: E501

        self._bill_ref_number = bill_ref_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(C2BPaymentSimulationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, C2BPaymentSimulationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
