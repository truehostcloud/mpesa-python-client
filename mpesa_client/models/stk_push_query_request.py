# coding: utf-8

"""
    Safaricom APIs

    M-Pesa API client for Daraja  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StkPushQueryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'business_short_code': 'int',
        'password': 'str',
        'timestamp': 'str',
        'checkout_request_id': 'str'
    }

    attribute_map = {
        'business_short_code': 'BusinessShortCode',
        'password': 'Password',
        'timestamp': 'Timestamp',
        'checkout_request_id': 'CheckoutRequestID'
    }

    def __init__(self, business_short_code=None, password=None, timestamp=None, checkout_request_id=None):  # noqa: E501
        """StkPushQueryRequest - a model defined in Swagger"""  # noqa: E501
        self._business_short_code = None
        self._password = None
        self._timestamp = None
        self._checkout_request_id = None
        self.discriminator = None
        self.business_short_code = business_short_code
        self.password = password
        self.timestamp = timestamp
        self.checkout_request_id = checkout_request_id

    @property
    def business_short_code(self):
        """Gets the business_short_code of this StkPushQueryRequest.  # noqa: E501

        This is the organization's shortcode (Paybill or Buygoods - a 5 to 7-digit account number) used to identify an organization and receive the transaction.  # noqa: E501

        :return: The business_short_code of this StkPushQueryRequest.  # noqa: E501
        :rtype: int
        """
        return self._business_short_code

    @business_short_code.setter
    def business_short_code(self, business_short_code):
        """Sets the business_short_code of this StkPushQueryRequest.

        This is the organization's shortcode (Paybill or Buygoods - a 5 to 7-digit account number) used to identify an organization and receive the transaction.  # noqa: E501

        :param business_short_code: The business_short_code of this StkPushQueryRequest.  # noqa: E501
        :type: int
        """
        if business_short_code is None:
            raise ValueError("Invalid value for `business_short_code`, must not be `None`")  # noqa: E501

        self._business_short_code = business_short_code

    @property
    def password(self):
        """Gets the password of this StkPushQueryRequest.  # noqa: E501

        This is the password used for encrypting the request sent. a base64 encoded string. (The base64 string is a combination of Shortcode+Passkey+Timestamp).  # noqa: E501

        :return: The password of this StkPushQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this StkPushQueryRequest.

        This is the password used for encrypting the request sent. a base64 encoded string. (The base64 string is a combination of Shortcode+Passkey+Timestamp).  # noqa: E501

        :param password: The password of this StkPushQueryRequest.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def timestamp(self):
        """Gets the timestamp of this StkPushQueryRequest.  # noqa: E501

        This is the Timestamp of the transaction, normally in the format of YEAR+MONTH+DATE+HOUR+MINUTE+SECOND (YYYYMMDDHHMMSS). Each part should be at least two digits, apart from the year which takes four digits.  # noqa: E501

        :return: The timestamp of this StkPushQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this StkPushQueryRequest.

        This is the Timestamp of the transaction, normally in the format of YEAR+MONTH+DATE+HOUR+MINUTE+SECOND (YYYYMMDDHHMMSS). Each part should be at least two digits, apart from the year which takes four digits.  # noqa: E501

        :param timestamp: The timestamp of this StkPushQueryRequest.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def checkout_request_id(self):
        """Gets the checkout_request_id of this StkPushQueryRequest.  # noqa: E501

        This is a global unique identifier of the processed checkout transaction request.  # noqa: E501

        :return: The checkout_request_id of this StkPushQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._checkout_request_id

    @checkout_request_id.setter
    def checkout_request_id(self, checkout_request_id):
        """Sets the checkout_request_id of this StkPushQueryRequest.

        This is a global unique identifier of the processed checkout transaction request.  # noqa: E501

        :param checkout_request_id: The checkout_request_id of this StkPushQueryRequest.  # noqa: E501
        :type: str
        """
        if checkout_request_id is None:
            raise ValueError("Invalid value for `checkout_request_id`, must not be `None`")  # noqa: E501

        self._checkout_request_id = checkout_request_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StkPushQueryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StkPushQueryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
